<bigger> Luacontroller Basics </bigger>
(this will just be a really shallow overview)

Luacontrollers execute <big>SANDBOXED and LIMITED</big> lua code, they can be used for controlling machines or logic devices.

Skyblock Zero's luacontrollers are <b>EXTREMELY</b> different than mesecon's luacontrollers. (But everything possible with mesecon's luacontrollers is possible with skyblock zero's luacontrollers)

If you are not familiar with lua, then uhh... you will need to learn it i guess?
If you are familiar with like any other programming language, it shouldn't be difficult (just experiment with the examples, then do a couple of "Lua for loop how to" searches, no need for a 5 hour long in-depth tutorial video). Don't worry it's no rust.
Also keep in mind that minetest is using luajit. (Almost the same as lua5.1, anything that works on lua5.1 *should* work on luajit.) 

So... how do you actually use a luacontroller...

By default, even when connected to power, it doesn't do anything....
To actually be able to use the luacontroller (well, for the first time anyway), you need to get the editor system disk. (See System Disks section)

If click the luacontroller with the editor system disk (will be reffered to as "punching editor" [code] here), it will deploy the disk's editor code to the luacontroller,
so if you right click the luacontroller, an editor should appear.

If there are any errors in the <b>editor</b> code, they will be displayed in the infotext (infotext is that text that appears when you hover a block).
But if there are any errors in the <b>main</b> code, they should be displayed by the editor.

Now... what's the difference between editor and main code...
Editor code - Code that's responsible for the editor, runs differently than main code but i won't get into that just now...
Main code - Code that actually does the thing you want to achieve with the luacontroller

<bigger>Compute Limits</bigger>

To not cause any harm to the server, or accidental infinite loops, the execution *time* of the luacontroller is limited.

The editor is limited to $EDITOR_MS_LIMIT$ miliseconds per event (such as clicking).
The main code is limited to $MAIN_MS_LIMIT$ miliseconds per event.
There is no hard cap on how many events per second you can have, but instead miliseconds per second. *Unlike luacontrollers*
So if main code and editor take up more than $COMBINED_MS_LIMIT$ miliseconds, per second, the sandbox won't be able to receive events until the next second passes.

Also, for each milisecond you take, you get billed 4 power.

<bigger>Main Code</bigger>

So, if you are used to the mesecons luacontroller, temporarily forget *everything* about how the code is executed, this is <b>very</b> different.

The main code gets executed inside a coroutine, and you can *yield* it, in fact that is how you obtain events.

<mono>event = yield()</mono>

